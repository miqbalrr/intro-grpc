// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/gatherloop.proto

package gatherloop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatherloopServiceClient is the client API for GatherloopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatherloopServiceClient interface {
	BuatSeminar(ctx context.Context, in *BuatSeminarRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetSeminar(ctx context.Context, in *GetSeminarRequest, opts ...grpc.CallOption) (*GetSeminarResponse, error)
}

type gatherloopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatherloopServiceClient(cc grpc.ClientConnInterface) GatherloopServiceClient {
	return &gatherloopServiceClient{cc}
}

func (c *gatherloopServiceClient) BuatSeminar(ctx context.Context, in *BuatSeminarRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/gatherloop.GatherloopService/BuatSeminar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatherloopServiceClient) GetSeminar(ctx context.Context, in *GetSeminarRequest, opts ...grpc.CallOption) (*GetSeminarResponse, error) {
	out := new(GetSeminarResponse)
	err := c.cc.Invoke(ctx, "/gatherloop.GatherloopService/GetSeminar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatherloopServiceServer is the server API for GatherloopService service.
// All implementations should embed UnimplementedGatherloopServiceServer
// for forward compatibility
type GatherloopServiceServer interface {
	BuatSeminar(context.Context, *BuatSeminarRequest) (*ServiceResponse, error)
	GetSeminar(context.Context, *GetSeminarRequest) (*GetSeminarResponse, error)
}

// UnimplementedGatherloopServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGatherloopServiceServer struct {
}

func (UnimplementedGatherloopServiceServer) BuatSeminar(context.Context, *BuatSeminarRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuatSeminar not implemented")
}
func (UnimplementedGatherloopServiceServer) GetSeminar(context.Context, *GetSeminarRequest) (*GetSeminarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeminar not implemented")
}

// UnsafeGatherloopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatherloopServiceServer will
// result in compilation errors.
type UnsafeGatherloopServiceServer interface {
	mustEmbedUnimplementedGatherloopServiceServer()
}

func RegisterGatherloopServiceServer(s grpc.ServiceRegistrar, srv GatherloopServiceServer) {
	s.RegisterService(&GatherloopService_ServiceDesc, srv)
}

func _GatherloopService_BuatSeminar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuatSeminarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherloopServiceServer).BuatSeminar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatherloop.GatherloopService/BuatSeminar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherloopServiceServer).BuatSeminar(ctx, req.(*BuatSeminarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatherloopService_GetSeminar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeminarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherloopServiceServer).GetSeminar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatherloop.GatherloopService/GetSeminar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherloopServiceServer).GetSeminar(ctx, req.(*GetSeminarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatherloopService_ServiceDesc is the grpc.ServiceDesc for GatherloopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatherloopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatherloop.GatherloopService",
	HandlerType: (*GatherloopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuatSeminar",
			Handler:    _GatherloopService_BuatSeminar_Handler,
		},
		{
			MethodName: "GetSeminar",
			Handler:    _GatherloopService_GetSeminar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gatherloop.proto",
}
